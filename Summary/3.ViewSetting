# 인프런 - 스프링 입문 강의 내용 정리

### 3. View 환경 설정

- 웰컴 페이지 만들기
  - static 디렉토리에 index.html 을 생성한다.
    - 이를 알아서 홈 화면으로 지정해준다.
    - static/index.html 을 올려두면 홈 화면으로 작동하는 것이 스프링 부트가 제공하는 기능이다.
  - index.html
    - 정적 파일, 적어놓은 그대로 웹 브라우저가 읽어서 보여줌

<br/>

<br/>

- 템플릿 엔진 사용하기

  - 템플릿 엔진 사용 시
    - 원하는 대로 정적인 웹 화면을 바꿔줄 수 있다.

  <br/>

  - thymeleaf 사용
    - 우리는 템플릿 엔진으로 타임리프를 사용할 것이다.
    - Spring Boot 에서 사용하는 Auto COnfiguration 에는 다음과 같은 것들이 있다.
      - FreeMarker
      - Groovy
      - Thymeleaf
      - Mustache

<br/>

<br/>

- 실습 ) 동작되는 화면 만들기

  -  <b>Controller 작성</b>

    - hello.hello-spring.contorller 패키지를 생성한다.
    - HelloController를 작성한다. 

    <br/>

  - templates 폴더에 <b>hello.html을 작성</b>

    - html 파일에 타임리프 엔진을 선언해두면 타임리프 문법을 사용할 수 있다.

    <br/>

  - 타임리프 템플릿 엔진 동작 확인

    - localhost:8080에서 /hello를 보낸다. (localhost:8080/hello)
    - 스프링 부트에 내장되어 있는 웹 서버에서 이를 받아 스프링에 보낸다.
    - 스프링이 HelloController 에서 Get 방식으로 찾아내 url에 매칭이되고, 해당 메소드가 동작한다.
    - 스프링이 model에 key인 data에 value인 hello!! 를 저장한다.
    - hello를 리턴한다.
      - 스프링 부트는 resources에 templates 아래에서 hello에 해당하는 파일<small>(hello.html)</small>을 찾아 렌더링한다. 이를 <mark>viewName 매핑</mark>이라고 한다.

<br/>

<br/>

- viewName 매핑이란?
  - 스프링 부트 템플릿 엔진의 기본적인 viewName 매핑 방식은
    - resources:templates/ + <mark>(viewName)</mark> + .html
    - 그래서 우리 프로젝트에서 return "hello" 에 해당하는 hello.html 을 resources/templates/에서 찾은 것이다.
  - 즉, 컨트롤러에서 리턴 값으로 문자를 반환하면 View resolver 가 화면을 찾아서 처리한다.

<br/>

<br/>

+) 참고

- spring-boot-devtools 라이브러리 추가 시
  - html 파일을 컴파일만 해주면 서버 재시작 없이 View 파일 변경이 가능하다.
